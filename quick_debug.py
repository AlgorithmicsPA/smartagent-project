#!/usr/bin/env python3
"""
Debug R√°pido - Para ver qu√© hay en la p√°gina despu√©s del login
"""
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# Configuraci√≥n
LOGIN_URL = "https://admin.besmartdelivery.mx/"
TASKS_URL = "https://admin.besmartdelivery.mx/tasks"
ADMIN_USERNAME = "federico"
ADMIN_PASSWORD = "***CONTRASE√ëA_OCULTA***"

class QuickDebug:
    def __init__(self):
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """Configurar Chrome WebDriver"""
        try:
            print("üöÄ Configurando Chrome WebDriver...")
            
            # Configurar opciones de Chrome
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # Crear el driver
            self.driver = webdriver.Chrome(options=chrome_options)
            
            # Configurar timeouts
            self.driver.implicitly_wait(10)
            self.driver.set_page_load_timeout(30)
            
            print("‚úÖ Chrome WebDriver configurado correctamente")
            
        except Exception as e:
            print(f"‚ùå Error configurando Chrome WebDriver: {e}")
            raise
    
    def login(self):
        """Iniciar sesi√≥n"""
        try:
            print("üîê Iniciando sesi√≥n...")
            
            # Ir a la p√°gina de login
            self.driver.get(LOGIN_URL)
            time.sleep(2)
            
            # Esperar a que aparezcan los campos de login
            wait = WebDriverWait(self.driver, 10)
            
            # Buscar campo de usuario
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "uid")))
            print("‚úÖ Campo usuario encontrado")
            
            # Limpiar y llenar campo de usuario
            username_field.clear()
            username_field.send_keys(ADMIN_USERNAME)
            
            # Buscar campo de contrase√±a
            password_field = self.driver.find_element(By.NAME, "password")
            print("‚úÖ Campo contrase√±a encontrado")
            
            # Limpiar y llenar campo de contrase√±a
            password_field.clear()
            password_field.send_keys(ADMIN_PASSWORD)
            
            # Presionar Enter para hacer login
            password_field.send_keys(Keys.RETURN)
            print("‚úÖ Login con Enter")
            
            # Esperar a que se complete el login
            time.sleep(5)
            
            print("‚úÖ Login exitoso")
            return True
            
        except Exception as e:
            print(f"‚ùå Error en login: {e}")
            return False
    
    def go_to_tasks_page(self):
        """Ir a la p√°gina de tareas"""
        try:
            print("üìÑ Navegando a la p√°gina de tareas...")
            self.driver.get(TASKS_URL)
            
            # Esperar a que se cargue la p√°gina completamente
            print("‚è≥ Esperando a que se cargue la p√°gina...")
            time.sleep(15)
            
            print("‚úÖ P√°gina de tareas cargada")
            return True
        except Exception as e:
            print(f"‚ùå Error navegando a tareas: {e}")
            return False
    
    def debug_page_content(self):
        """Debug del contenido de la p√°gina"""
        try:
            print("\nüîç DEBUG DEL CONTENIDO DE LA P√ÅGINA")
            print("=" * 50)
            
            # Mostrar URL actual
            print(f"üìç URL actual: {self.driver.current_url}")
            
            # Mostrar t√≠tulo de la p√°gina
            print(f"üìÑ T√≠tulo: {self.driver.title}")
            
            # Contar elementos por tipo
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            divs = self.driver.find_elements(By.TAG_NAME, "div")
            spans = self.driver.find_elements(By.TAG_NAME, "span")
            inputs = self.driver.find_elements(By.TAG_NAME, "input")
            
            print(f"üìä Elementos encontrados:")
            print(f"  - Botones: {len(buttons)}")
            print(f"  - Divs: {len(divs)}")
            print(f"  - Spans: {len(spans)}")
            print(f"  - Inputs: {len(inputs)}")
            
            # Buscar elementos con clase "btn"
            btn_elements = self.driver.find_elements(By.CLASS_NAME, "btn")
            print(f"  - Elementos con clase 'btn': {len(btn_elements)}")
            
            # Buscar elementos que contengan "Active"
            active_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Active')]")
            print(f"  - Elementos con 'Active': {len(active_elements)}")
            
            # Buscar elementos que contengan "orders"
            orders_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'orders')]")
            print(f"  - Elementos con 'orders': {len(orders_elements)}")
            
            # Mostrar texto de todos los botones
            print("\nüîò TODOS LOS BOTONES:")
            for i, button in enumerate(buttons):
                try:
                    text = button.text.strip()
                    button_type = button.get_attribute("type")
                    button_class = button.get_attribute("class")
                    print(f"  Bot√≥n {i+1}: Texto='{text}', Tipo='{button_type}', Clase='{button_class}'")
                except:
                    print(f"  Bot√≥n {i+1}: Error al obtener informaci√≥n")
            
            # Mostrar texto de los primeros 10 divs
            print("\nüì¶ PRIMEROS 10 DIVS:")
            for i, div in enumerate(divs[:10]):
                try:
                    text = div.text.strip()
                    div_class = div.get_attribute("class")
                    if text:  # Solo mostrar divs con texto
                        print(f"  Div {i+1}: Texto='{text[:100]}...', Clase='{div_class}'")
                except:
                    print(f"  Div {i+1}: Error al obtener informaci√≥n")
            
            # Mostrar texto de todos los spans
            print("\nüè∑Ô∏è TODOS LOS SPANS:")
            for i, span in enumerate(spans):
                try:
                    text = span.text.strip()
                    span_class = span.get_attribute("class")
                    if text:  # Solo mostrar spans con texto
                        print(f"  Span {i+1}: Texto='{text}', Clase='{span_class}'")
                except:
                    print(f"  Span {i+1}: Error al obtener informaci√≥n")
            
            # Buscar elementos con clases espec√≠ficas
            print("\nüéØ ELEMENTOS CON CLASES ESPEC√çFICAS:")
            class_names = ["btn", "button", "label", "value", "orders", "active", "task", "dashboard", "nav", "menu"]
            for class_name in class_names:
                elements = self.driver.find_elements(By.CLASS_NAME, class_name)
                if len(elements) > 0:
                    print(f"  - Clase '{class_name}': {len(elements)} elementos")
                    # Mostrar texto del primer elemento
                    try:
                        first_text = elements[0].text.strip()
                        if first_text:
                            print(f"    Primer elemento: '{first_text[:50]}...'")
                    except:
                        print(f"    Primer elemento: Error al obtener texto")
            
            print("\n" + "=" * 50)
            
        except Exception as e:
            print(f"‚ùå Error en debug: {e}")
    
    def run_debug(self):
        """Ejecutar debug completo"""
        try:
            print("üî¨ DEBUG R√ÅPIDO DEL MONITOR DE √ìRDENES")
            print("=" * 50)
            
            # Login inicial
            if not self.login():
                print("‚ùå No se pudo hacer login")
                return
            
            # Ir a la p√°gina de tareas
            if not self.go_to_tasks_page():
                print("‚ùå No se pudo ir a la p√°gina de tareas")
                return
            
            # Ejecutar debug
            self.debug_page_content()
            
            # Esperar un poco para que el usuario pueda ver los resultados
            print("\n‚è∞ Esperando 30 segundos para que puedas revisar los resultados...")
            time.sleep(30)
            
        except Exception as e:
            print(f"‚ùå Error en debug: {e}")
        finally:
            self.close_driver()
    
    def close_driver(self):
        """Cerrar el WebDriver"""
        if self.driver:
            self.driver.quit()
            print("‚úÖ WebDriver cerrado")

def main():
    debug = QuickDebug()
    debug.run_debug()

if __name__ == "__main__":
    main() 