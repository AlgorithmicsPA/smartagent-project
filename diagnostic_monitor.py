#!/usr/bin/env python3
"""
Monitor de Diagn√≥stico - Para entender qu√© est√° pasando en la p√°gina
"""
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Configuraci√≥n
LOGIN_URL = "https://admin.besmartdelivery.mx/"
TASKS_URL = "https://admin.besmartdelivery.mx/tasks"
ADMIN_USERNAME = "federico"
ADMIN_PASSWORD = "28ZwnPHQRC*H4BmfmEB-YHcC"

class DiagnosticMonitor:
    def __init__(self):
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """Configurar Chrome WebDriver"""
        try:
            print("üöÄ Configurando Chrome WebDriver...")
            
            # Configurar opciones de Chrome
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # Crear el driver
            self.driver = webdriver.Chrome(options=chrome_options)
            
            # Configurar timeouts
            self.driver.implicitly_wait(10)
            self.driver.set_page_load_timeout(30)
            
            print("‚úÖ Chrome WebDriver configurado correctamente")
            
        except Exception as e:
            print(f"‚ùå Error configurando Chrome WebDriver: {e}")
            raise
    
    def login(self):
        """Iniciar sesi√≥n"""
        try:
            print("üîê Iniciando sesi√≥n...")
            
            # Ir a la p√°gina de login
            self.driver.get(LOGIN_URL)
            time.sleep(2)
            
            # Esperar a que aparezcan los campos de login
            wait = WebDriverWait(self.driver, 10)
            
            # Buscar campo de usuario
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "uid")))
            print("‚úÖ Campo usuario encontrado")
            
            # Limpiar y llenar campo de usuario
            username_field.clear()
            username_field.send_keys(ADMIN_USERNAME)
            
            # Buscar campo de contrase√±a
            password_field = self.driver.find_element(By.NAME, "password")
            print("‚úÖ Campo contrase√±a encontrado")
            
            # Limpiar y llenar campo de contrase√±a
            password_field.clear()
            password_field.send_keys(ADMIN_PASSWORD)
            
            # Intentar m√∫ltiples estrategias para el login
            login_success = False
            
            # Estrategia 1: Buscar bot√≥n de submit
            try:
                submit_button = self.driver.find_element(By.XPATH, "//button[@type='submit']")
                submit_button.click()
                print("‚úÖ Login con bot√≥n submit")
                login_success = True
            except:
                print("‚ö†Ô∏è Bot√≥n submit no encontrado")
            
            # Estrategia 2: Presionar Enter en el campo de contrase√±a
            if not login_success:
                try:
                    password_field.send_keys(Keys.RETURN)
                    print("‚úÖ Login con Enter")
                    login_success = True
                except:
                    print("‚ö†Ô∏è Enter no funcion√≥")
            
            if not login_success:
                print("‚ùå No se pudo realizar el login")
                return False
            
            # Esperar a que se complete el login
            time.sleep(3)
            
            print("‚úÖ Login exitoso")
            return True
            
        except Exception as e:
            print(f"‚ùå Error en login: {e}")
            return False
    
    def go_to_tasks_page(self):
        """Ir a la p√°gina de tareas"""
        try:
            print("üìÑ Navegando a la p√°gina de tareas...")
            self.driver.get(TASKS_URL)
            time.sleep(3)
            print("‚úÖ P√°gina de tareas cargada")
            return True
        except Exception as e:
            print(f"‚ùå Error navegando a tareas: {e}")
            return False
    
    def diagnose_page(self):
        """Diagnosticar la p√°gina actual"""
        try:
            print("\nüîç DIAGN√ìSTICO DE LA P√ÅGINA")
            print("=" * 50)
            
            # Mostrar URL actual
            print(f"üìç URL actual: {self.driver.current_url}")
            
            # Mostrar t√≠tulo de la p√°gina
            print(f"üìÑ T√≠tulo: {self.driver.title}")
            
            # Buscar todos los botones en la p√°gina
            print("\nüîò BUSCANDO BOTONES:")
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            print(f"üìä Total de botones encontrados: {len(buttons)}")
            
            for i, button in enumerate(buttons[:10]):  # Mostrar solo los primeros 10
                try:
                    text = button.text.strip()
                    button_type = button.get_attribute("type")
                    button_class = button.get_attribute("class")
                    print(f"  Bot√≥n {i+1}: Texto='{text}', Tipo='{button_type}', Clase='{button_class}'")
                except:
                    print(f"  Bot√≥n {i+1}: Error al obtener informaci√≥n")
            
            # Buscar elementos con clase "btn"
            print("\nüéØ BUSCANDO ELEMENTOS CON CLASE 'btn':")
            btn_elements = self.driver.find_elements(By.CLASS_NAME, "btn")
            print(f"üìä Total de elementos con clase 'btn': {len(btn_elements)}")
            
            for i, btn in enumerate(btn_elements[:10]):  # Mostrar solo los primeros 10
                try:
                    text = btn.text.strip()
                    btn_class = btn.get_attribute("class")
                    print(f"  Btn {i+1}: Texto='{text}', Clase='{btn_class}'")
                except:
                    print(f"  Btn {i+1}: Error al obtener informaci√≥n")
            
            # Buscar elementos que contengan "Active orders"
            print("\nüîç BUSCANDO ELEMENTOS CON 'Active orders':")
            active_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Active orders')]")
            print(f"üìä Total de elementos con 'Active orders': {len(active_elements)}")
            
            for i, elem in enumerate(active_elements):
                try:
                    text = elem.text.strip()
                    tag_name = elem.tag_name
                    elem_class = elem.get_attribute("class")
                    print(f"  Elemento {i+1}: Tag='{tag_name}', Texto='{text}', Clase='{elem_class}'")
                except:
                    print(f"  Elemento {i+1}: Error al obtener informaci√≥n")
            
            # Buscar elementos con clase "label"
            print("\nüè∑Ô∏è BUSCANDO ELEMENTOS CON CLASE 'label':")
            label_elements = self.driver.find_elements(By.CLASS_NAME, "label")
            print(f"üìä Total de elementos con clase 'label': {len(label_elements)}")
            
            for i, label in enumerate(label_elements[:10]):  # Mostrar solo los primeros 10
                try:
                    text = label.text.strip()
                    print(f"  Label {i+1}: Texto='{text}'")
                except:
                    print(f"  Label {i+1}: Error al obtener informaci√≥n")
            
            # Buscar elementos con clase "value"
            print("\nüíé BUSCANDO ELEMENTOS CON CLASE 'value':")
            value_elements = self.driver.find_elements(By.CLASS_NAME, "value")
            print(f"üìä Total de elementos con clase 'value': {len(value_elements)}")
            
            for i, value in enumerate(value_elements[:10]):  # Mostrar solo los primeros 10
                try:
                    text = value.text.strip()
                    print(f"  Value {i+1}: Texto='{text}'")
                except:
                    print(f"  Value {i+1}: Error al obtener informaci√≥n")
            
            # Mostrar el HTML de la p√°gina (primeros 1000 caracteres)
            print("\nüìÑ HTML DE LA P√ÅGINA (primeros 1000 caracteres):")
            page_source = self.driver.page_source
            print(page_source[:1000] + "..." if len(page_source) > 1000 else page_source)
            
            print("\n" + "=" * 50)
            
        except Exception as e:
            print(f"‚ùå Error en diagn√≥stico: {e}")
    
    def run_diagnostic(self):
        """Ejecutar diagn√≥stico completo"""
        try:
            print("üî¨ DIAGN√ìSTICO DEL MONITOR DE √ìRDENES")
            print("=" * 50)
            
            # Login inicial
            if not self.login():
                print("‚ùå No se pudo hacer login")
                return
            
            # Ir a la p√°gina de tareas
            if not self.go_to_tasks_page():
                print("‚ùå No se pudo ir a la p√°gina de tareas")
                return
            
            # Ejecutar diagn√≥stico
            self.diagnose_page()
            
            # Esperar un poco para que el usuario pueda ver los resultados
            print("\n‚è∞ Esperando 30 segundos para que puedas revisar los resultados...")
            time.sleep(30)
            
        except Exception as e:
            print(f"‚ùå Error en diagn√≥stico: {e}")
        finally:
            self.close_driver()
    
    def close_driver(self):
        """Cerrar el WebDriver"""
        if self.driver:
            self.driver.quit()
            print("‚úÖ WebDriver cerrado")

def main():
    monitor = DiagnosticMonitor()
    monitor.run_diagnostic()

if __name__ == "__main__":
    main() 