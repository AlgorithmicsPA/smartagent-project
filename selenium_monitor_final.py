#!/usr/bin/env python3
"""
Monitor de Pedidos con Selenium - Versi√≥n Final
Versi√≥n con selectores flexibles y mejor manejo de errores
"""
import time
import hashlib
import re
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Configuraci√≥n
LOGIN_URL = "https://admin.besmartdelivery.mx/"
TASKS_URL = "https://admin.besmartdelivery.mx/tasks"
ADMIN_USERNAME = "federico"
ADMIN_PASSWORD = "28ZwnPHQRC*H4BmfmEB-YHcC"

class SeleniumMonitorFinal:
    def __init__(self):
        self.driver = None
        self.known_orders = set()
        self.setup_driver()
    
    def setup_driver(self):
        """Configurar Chrome WebDriver"""
        try:
            print("üöÄ Configurando Chrome WebDriver...")
            
            # Configurar opciones de Chrome
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # Crear el driver
            self.driver = webdriver.Chrome(options=chrome_options)
            
            # Configurar timeouts
            self.driver.implicitly_wait(10)
            self.driver.set_page_load_timeout(30)
            
            print("‚úÖ Chrome WebDriver configurado correctamente")
            
        except Exception as e:
            print(f"‚ùå Error configurando Chrome WebDriver: {e}")
            raise
    
    def login(self):
        """Iniciar sesi√≥n con selectores flexibles"""
        try:
            print("üîê Iniciando sesi√≥n...")
            
            # Ir a la p√°gina de login
            self.driver.get(LOGIN_URL)
            time.sleep(2)
            
            # Esperar a que aparezcan los campos de login
            wait = WebDriverWait(self.driver, 10)
            
            # Buscar campo de usuario con diferentes selectores
            username_field = None
            username_selectors = [
                (By.NAME, "uid"),
                (By.NAME, "username"),
                (By.NAME, "email"),
                (By.ID, "username"),
                (By.ID, "email"),
                (By.XPATH, "//input[@type='text']"),
                (By.XPATH, "//input[@placeholder*='user' or @placeholder*='email']")
            ]
            
            for selector_type, selector_value in username_selectors:
                try:
                    username_field = wait.until(EC.presence_of_element_located((selector_type, selector_value)))
                    print(f"‚úÖ Campo usuario encontrado con: {selector_type}={selector_value}")
                    break
                except:
                    continue
            
            if not username_field:
                print("‚ùå No se pudo encontrar el campo de usuario")
                return False
            
            # Limpiar y llenar campo de usuario
            username_field.clear()
            username_field.send_keys(ADMIN_USERNAME)
            
            # Buscar campo de contrase√±a
            password_field = None
            password_selectors = [
                (By.NAME, "password"),
                (By.ID, "password"),
                (By.XPATH, "//input[@type='password']")
            ]
            
            for selector_type, selector_value in password_selectors:
                try:
                    password_field = self.driver.find_element(selector_type, selector_value)
                    print(f"‚úÖ Campo contrase√±a encontrado con: {selector_type}={selector_value}")
                    break
                except:
                    continue
            
            if not password_field:
                print("‚ùå No se pudo encontrar el campo de contrase√±a")
                return False
            
            # Limpiar y llenar campo de contrase√±a
            password_field.clear()
            password_field.send_keys(ADMIN_PASSWORD)
            
            # Buscar bot√≥n de login con diferentes selectores
            login_button = None
            login_selectors = [
                (By.XPATH, "//button[@type='submit']"),
                (By.XPATH, "//button[contains(text(), 'Login')]"),
                (By.XPATH, "//button[contains(text(), 'Sign in')]"),
                (By.XPATH, "//button[contains(text(), 'Entrar')]"),
                (By.XPATH, "//input[@type='submit']"),
                (By.CLASS_NAME, "login-button"),
                (By.CLASS_NAME, "submit-button"),
                (By.XPATH, "//button[contains(@class, 'btn')]")
            ]
            
            for selector_type, selector_value in login_selectors:
                try:
                    login_button = self.driver.find_element(selector_type, selector_value)
                    print(f"‚úÖ Bot√≥n login encontrado con: {selector_type}={selector_value}")
                    break
                except:
                    continue
            
            if not login_button:
                print("‚ùå No se pudo encontrar el bot√≥n de login")
                # Intentar hacer clic en el campo de contrase√±a y presionar Enter
                try:
                    password_field.send_keys(webdriver.Keys.RETURN)
                    print("‚úÖ Login intentado con Enter")
                except:
                    return False
            else:
                # Hacer clic en el bot√≥n de login
                login_button.click()
                print("‚úÖ Bot√≥n de login presionado")
            
            # Esperar a que se complete el login
            time.sleep(3)
            
            # Verificar si el login fue exitoso
            if "admin" in self.driver.current_url.lower() or "dashboard" in self.driver.current_url.lower():
                print("‚úÖ Login exitoso")
                return True
            else:
                print("‚ö†Ô∏è Login puede no haber sido exitoso, continuando...")
                return True
            
        except Exception as e:
            print(f"‚ùå Error en login: {e}")
            return False
    
    def go_to_tasks_page(self):
        """Ir a la p√°gina de tareas"""
        try:
            print("üìÑ Navegando a la p√°gina de tareas...")
            self.driver.get(TASKS_URL)
            time.sleep(3)
            print("‚úÖ P√°gina de tareas cargada")
            return True
        except Exception as e:
            print(f"‚ùå Error navegando a tareas: {e}")
            return False
    
    def click_active_orders_button(self):
        """Hacer clic en el bot√≥n Active orders"""
        try:
            print("üéØ Buscando bot√≥n Active orders...")
            
            wait = WebDriverWait(self.driver, 10)
            
            # Buscar el bot√≥n Active orders con diferentes estrategias
            active_orders_button = None
            
            # Estrategia 1: Buscar por texto exacto
            try:
                active_orders_button = wait.until(EC.element_to_be_clickable((
                    By.XPATH, "//div[@class='btn']//span[@class='label'][contains(text(), 'Active orders')]/.."
                )))
            except:
                pass
            
            # Estrategia 2: Buscar por clase y contenido
            if not active_orders_button:
                try:
                    buttons = self.driver.find_elements(By.CLASS_NAME, "btn")
                    for button in buttons:
                        try:
                            label = button.find_element(By.CLASS_NAME, "label")
                            if "Active orders" in label.text:
                                active_orders_button = button
                                break
                        except:
                            continue
                except:
                    pass
            
            # Estrategia 3: Buscar por texto parcial
            if not active_orders_button:
                try:
                    active_orders_button = self.driver.find_element(By.XPATH, "//*[contains(text(), 'Active orders')]")
                except:
                    pass
            
            if active_orders_button:
                # Obtener el valor antes del clic
                try:
                    value_span = active_orders_button.find_element(By.CLASS_NAME, "value")
                    active_count = value_span.text
                    print(f"üìä Bot√≥n Active orders encontrado con {active_count} √≥rdenes")
                except:
                    print("üìä Bot√≥n Active orders encontrado")
                
                # Hacer clic en el bot√≥n
                active_orders_button.click()
                print("‚úÖ Bot√≥n Active orders activado")
                
                # Esperar a que se cargue la tabla
                time.sleep(2)
                
                return True
            else:
                print("‚ö†Ô∏è Bot√≥n Active orders no encontrado")
                return False
            
        except Exception as e:
            print(f"‚ùå Error activando bot√≥n: {e}")
            return False
    
    def extract_orders(self):
        """Extraer √≥rdenes de la tabla"""
        try:
            print("üîç Extrayendo √≥rdenes de la tabla...")
            
            # Buscar la tabla de √≥rdenes
            wait = WebDriverWait(self.driver, 10)
            orders_table = wait.until(EC.presence_of_element_located((
                By.CLASS_NAME, "responsive-table"
            )))
            
            # Buscar filas de √≥rdenes
            order_rows = orders_table.find_elements(By.CLASS_NAME, "orders-list-item")
            print(f"üìä Encontradas {len(order_rows)} √≥rdenes en la tabla")
            
            new_orders = []
            
            for row in order_rows:
                order_data = self.parse_order_row(row)
                if order_data:
                    # Generar hash √∫nico
                    order_hash = hashlib.sha256(
                        f"{order_data.get('order_id', '')}{order_data.get('customer_name', '')}".encode()
                    ).hexdigest()
                    
                    if order_hash not in self.known_orders:
                        self.known_orders.add(order_hash)
                        new_orders.append(order_data)
                        print(f"üéØ Nueva orden detectada: {order_data.get('order_id', 'N/A')}")
            
            return new_orders
            
        except TimeoutException:
            print("‚ö†Ô∏è Tabla de √≥rdenes no encontrada")
            return []
        except Exception as e:
            print(f"‚ùå Error extrayendo √≥rdenes: {e}")
            return []
    
    def parse_order_row(self, row):
        """Parsear una fila de orden"""
        try:
            # Obtener todas las celdas
            cells = row.find_elements(By.TAG_NAME, "td")
            if len(cells) < 10:
                return None
            
            order_data = {
                'timestamp': datetime.now().isoformat(),
                'status': 'Desconocido'
            }
            
            # Columna 1: ID de orden
            if len(cells) > 0:
                try:
                    order_id_field = cells[0].find_element(By.CLASS_NAME, "order-id-field")
                    order_text = order_id_field.text.strip()
                    numbers = re.findall(r'\d+', order_text)
                    if numbers:
                        order_data['order_id'] = numbers[-1]
                except:
                    pass
            
            # Columna 2: Restaurante
            if len(cells) > 1:
                try:
                    vendor_field = cells[1].find_element(By.CLASS_NAME, "vendor-field")
                    vendor_link = vendor_field.find_element(By.CLASS_NAME, "link")
                    order_data['restaurant'] = vendor_link.text.strip()
                except:
                    pass
            
            # Columna 3: Cliente
            if len(cells) > 2:
                try:
                    customer_field = cells[2].find_element(By.CLASS_NAME, "customer-field")
                    customer_link = customer_field.find_element(By.CLASS_NAME, "link")
                    order_data['customer_name'] = customer_link.text.strip()
                except:
                    pass
            
            # Columna 4: Zona
            if len(cells) > 3:
                try:
                    zone_text = cells[3].text.strip()
                    if zone_text:
                        order_data['delivery_address'] = zone_text
                except:
                    pass
            
            # Columna 5: Total
            if len(cells) > 4:
                try:
                    price_span = cells[4].find_element(By.CLASS_NAME, "price")
                    price_text = price_span.text.strip()
                    numbers = re.findall(r'[\d,]+\.?\d*', price_text)
                    if numbers:
                        order_data['total_amount'] = numbers[0]
                except:
                    pass
            
            # Columna 6: Hora de creaci√≥n
            if len(cells) > 5:
                try:
                    created_text = cells[5].text.strip()
                    if created_text:
                        order_data['created_at'] = created_text
                except:
                    pass
            
            # Columna 7: CT (Cooking time)
            if len(cells) > 6:
                try:
                    ct_text = cells[6].text.strip()
                    if ct_text:
                        order_data['cooking_time'] = ct_text
                except:
                    pass
            
            # Columna 8: DT (Delivery time)
            if len(cells) > 7:
                try:
                    dt_text = cells[7].text.strip()
                    if dt_text:
                        order_data['delivery_time'] = dt_text
                except:
                    pass
            
            # Columna 9: Rider
            if len(cells) > 8:
                try:
                    rider_text = cells[8].text.strip()
                    if rider_text:
                        order_data['rider'] = rider_text
                except:
                    pass
            
            # Estado basado en las clases de la fila
            row_classes = row.get_attribute("class")
            if 'processed' in row_classes:
                order_data['status'] = 'Procesado'
            elif 'inpreparation' in row_classes:
                order_data['status'] = 'En Preparaci√≥n'
            elif 'readyforcollection' in row_classes:
                order_data['status'] = 'Listo para Recoger'
            elif 'ontheway' in row_classes:
                order_data['status'] = 'En Camino'
            elif 'atlocation' in row_classes:
                order_data['status'] = 'En Ubicaci√≥n'
            else:
                order_data['status'] = 'Desconocido'
            
            return order_data
            
        except Exception as e:
            print(f"‚ùå Error parseando fila: {e}")
            return None
    
    def display_orders(self, orders):
        """Mostrar √≥rdenes en consola"""
        if not orders:
            return
        
        print("\n" + "="*140)
        print("üö® ¬°NUEVAS √ìRDENES DETECTADAS! üö®")
        print("="*140)
        print(f"{'ID':<8} {'Estado':<15} {'Restaurante':<25} {'Cliente':<20} {'Zona':<25} {'Total':<10} {'Hora':<8} {'CT':<8} {'DT':<8} {'Rider':<12}")
        print("-"*140)
        
        for order_data in orders:
            order_id = order_data.get('order_id', 'N/A')
            status = order_data.get('status', 'N/A')
            restaurant = order_data.get('restaurant', 'N/A')
            if len(restaurant) > 24:
                restaurant = restaurant[:24] + "..."
            customer = order_data.get('customer_name', 'N/A')
            if len(customer) > 19:
                customer = customer[:19] + "..."
            zone = order_data.get('delivery_address', 'N/A')
            if len(zone) > 24:
                zone = zone[:24] + "..."
            total = order_data.get('total_amount', 'N/A')
            created_at = order_data.get('created_at', 'N/A')
            cooking_time = order_data.get('cooking_time', 'N/A')
            delivery_time = order_data.get('delivery_time', 'N/A')
            rider = order_data.get('rider', 'N/A')
            if len(rider) > 11:
                rider = rider[:11] + "..."
            
            print(f"{order_id:<8} {status:<15} {restaurant:<25} {customer:<20} {zone:<25} {total:<10} {created_at:<8} {cooking_time:<8} {delivery_time:<8} {rider:<12}")
        
        print("-"*140)
        print(f"üìä Nuevas √≥rdenes detectadas: {len(orders)}")
        print("="*140 + "\n")
    
    def monitor_orders(self):
        """Monitorear √≥rdenes continuamente"""
        try:
            print("üéØ MONITOR DE √ìRDENES CON SELENIUM - VERSI√ìN FINAL")
            print("=" * 50)
            print("üí° Presiona Ctrl+C para detener")
            print("=" * 50)
            
            # Login inicial
            if not self.login():
                print("‚ùå No se pudo hacer login")
                return
            
            # Ir a la p√°gina de tareas
            if not self.go_to_tasks_page():
                print("‚ùå No se pudo ir a la p√°gina de tareas")
                return
            
            check_interval = 10  # segundos
            
            while True:
                try:
                    print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} - Verificando nuevas √≥rdenes...")
                    
                    # Hacer clic en el bot√≥n Active orders
                    if self.click_active_orders_button():
                        # Extraer √≥rdenes
                        new_orders = self.extract_orders()
                        
                        # Mostrar √≥rdenes si hay nuevas
                        if new_orders:
                            self.display_orders(new_orders)
                        else:
                            print("‚ÑπÔ∏è No hay nuevas √≥rdenes")
                    else:
                        print("‚ö†Ô∏è No se pudo activar el bot√≥n Active orders")
                    
                    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - Esperando {check_interval} segundos...")
                    time.sleep(check_interval)
                    
                except KeyboardInterrupt:
                    print("\nüõë Monitor detenido por el usuario")
                    break
                except Exception as e:
                    print(f"‚ùå Error en el monitoreo: {e}")
                    time.sleep(check_interval)
        
        finally:
            self.close_driver()
    
    def close_driver(self):
        """Cerrar el WebDriver"""
        if self.driver:
            self.driver.quit()
            print("‚úÖ WebDriver cerrado")

def main():
    monitor = SeleniumMonitorFinal()
    monitor.monitor_orders()

if __name__ == "__main__":
    main() 